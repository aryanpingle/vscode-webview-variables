/**
 * Generates src/index.ts which will later be transpiled.
 */

const fs = require("fs");

function getVariableNameWithoutVSCode(variableName) {
  return variableName.substring("--vscode-".length);
}

const fileContent = fs.readFileSync("src/original-variables.txt").toString();
const CSSVariableNames = fileContent.split("\n");
CSSVariableNames.sort();

const exportedObject = {};
CSSVariableNames.forEach((cssVar) => {
  const propertyName = getVariableNameWithoutVSCode(cssVar);

  exportedObject[propertyName] = {
    cssName: cssVar,
    themeName: propertyName.replaceAll("-", "."),
  };
});

const VscodeColorsJSDoc = `/**
 * Each key of this object maps to an object of type \`VscodeColor\` containing the CSS
 * variable name and VSCode Theme Color name.
 *
 * @example
 * VscodeCSSVariables.foreground = {
 *     cssName: "--vscode-foreground",
 *     themeName: "foreground"
 * }
 * VscodeCSSVariables["textLink-foreground"] = {
 *     cssName: "--vscode-textLink-foreground",
 *     themeName: "textLink.foreground"
 * }
 *
 * @see https://code.visualstudio.com/api/references/theme-color
 */`;

const autoGeneratedDisclaimer = `/* This file is automatically generated by src/create-index.js */`;

/**
 * Generate the typescript file containing the actual object.
 */
function generateTypescriptFile(filepath) {
  const VscodeColorsObject =
    "export const VscodeColors = " +
    JSON.stringify(exportedObject, undefined, 2);

  const VscodeColorInterface =
    `export interface VscodeColor {` +
    `\n  cssName: string;` +
    `\n  themeName: string;` +
    `\n}`;

  const originalFileContents = fs
    .readFileSync("src/index-template.ts")
    .toString();

  let generatedFileContents = originalFileContents;
  // Inject the interface
  generatedFileContents = generatedFileContents.replace(
    /^\/\/ inject:VscodeColor$/m,
    VscodeColorInterface
  );
  // Inject the variables object
  generatedFileContents = generatedFileContents.replace(
    /^\/\/ inject:VscodeColors$/m,
    VscodeColorsJSDoc + "\n\n" + VscodeColorsObject
  );

  fs.writeFileSync("src/index.ts", autoGeneratedDisclaimer + "\n\n" + generatedFileContents);
}

function generateDeclarationFile(filepath) {
  const VscodeColorInterface =
    `export interface VscodeColor {` +
    `\n  cssName: string;` +
    `\n  themeName: string;` +
    `\n}`;

  const exportedObjectTypeString =
    `export interface VscodeColors {\n` +
    Object.keys(exportedObject)
      .map((key) => `  "${key}": VscodeColor;`)
      .join("\n") +
    "\n}";

  const declarationContent =
    autoGeneratedDisclaimer +
    "\n\n" +
    VscodeColorInterface +
    "\n\n" +
    exportedObjectTypeString;
  fs.writeFileSync(filepath, declarationContent);
}

generateTypescriptFile();
// generateDeclarationFile("dist/vscode-colors.d.ts");
